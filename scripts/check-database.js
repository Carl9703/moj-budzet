const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkDatabase() {
    console.log('üîç Sprawdzanie bazy danych...\n');
    
    try {
        // 1. Sprawd≈∫ wszystkich u≈ºytkownik√≥w
        console.log('üë• U≈ªYTKOWNICY:');
        const users = await prisma.user.findMany({
            select: {
                id: true,
                email: true,
                name: true,
                createdAt: true,
                _count: {
                    select: {
                        transactions: true,
                        envelopes: true
                    }
                }
            }
        });
        
        users.forEach(user => {
            console.log(`- ${user.email} (${user.name})`);
            console.log(`  ID: ${user.id}`);
            console.log(`  Transakcje: ${user._count.transactions}`);
            console.log(`  Koperty: ${user._count.envelopes}`);
            console.log(`  Utworzony: ${user.createdAt.toISOString()}`);
            console.log('');
        });
        
        // 2. Sprawd≈∫ transakcje demo user
        const demoUser = users.find(u => u.email === 'demo@example.com');
        if (demoUser) {
            console.log('üìä TRANSAKCJE DEMO USER:');
            const demoTransactions = await prisma.transaction.findMany({
                where: { userId: demoUser.id },
                select: {
                    id: true,
                    type: true,
                    amount: true,
                    description: true,
                    date: true,
                    envelope: {
                        select: { name: true }
                    }
                },
                orderBy: { date: 'desc' },
                take: 10
            });
            
            if (demoTransactions.length === 0) {
                console.log('‚ùå Demo user nie ma transakcji');
            } else {
                console.log(`‚úÖ Demo user ma ${demoTransactions.length} transakcji:`);
                demoTransactions.forEach(t => {
                    console.log(`  - ${t.type}: ${t.amount}z≈Ç (${t.description || 'brak opisu'}) - ${t.envelope?.name || 'brak koperty'}`);
                });
            }
        } else {
            console.log('‚ùå Demo user nie istnieje w bazie');
        }
        
        // 3. Sprawd≈∫ koperty demo user
        if (demoUser) {
            console.log('\nüìÅ KOPERTY DEMO USER:');
            const demoEnvelopes = await prisma.envelope.findMany({
                where: { userId: demoUser.id },
                select: {
                    name: true,
                    type: true,
                    plannedAmount: true,
                    currentAmount: true,
                    group: true
                }
            });
            
            if (demoEnvelopes.length === 0) {
                console.log('‚ùå Demo user nie ma kopert');
            } else {
                console.log(`‚úÖ Demo user ma ${demoEnvelopes.length} kopert:`);
                demoEnvelopes.forEach(e => {
                    console.log(`  - ${e.name}: ${e.currentAmount}/${e.plannedAmount}z≈Ç (${e.type}, ${e.group})`);
                });
            }
        }
        
        // 4. Sprawd≈∫ czy sƒÖ transakcje innych u≈ºytkownik√≥w
        console.log('\nüîí BEZPIECZE≈ÉSTWO - SPRAWDZENIE IZOLACJI:');
        const allTransactions = await prisma.transaction.findMany({
            select: {
                id: true,
                userId: true,
                type: true,
                amount: true,
                description: true,
                user: {
                    select: { email: true }
                }
            },
            orderBy: { createdAt: 'desc' },
            take: 20
        });
        
        console.log(`üìà Ostatnie 20 transakcji w systemie:`);
        allTransactions.forEach(t => {
            console.log(`  - ${t.user.email}: ${t.type} ${t.amount}z≈Ç (${t.description || 'brak opisu'})`);
        });
        
        // 5. Sprawd≈∫ czy demo user ma dostƒôp do innych danych
        if (demoUser) {
            console.log('\nüö® SPRAWDZENIE DOSTƒòPU DEMO USER:');
            
            // Sprawd≈∫ czy demo user mo≈ºe zobaczyƒá transakcje innych u≈ºytkownik√≥w
            const otherUsersTransactions = await prisma.transaction.findMany({
                where: {
                    userId: { not: demoUser.id }
                },
                select: {
                    id: true,
                    userId: true,
                    type: true,
                    amount: true,
                    user: {
                        select: { email: true }
                    }
                },
                take: 5
            });
            
            if (otherUsersTransactions.length > 0) {
                console.log('‚ö†Ô∏è  UWAGA: W systemie sƒÖ transakcje innych u≈ºytkownik√≥w:');
                otherUsersTransactions.forEach(t => {
                    console.log(`  - ${t.user.email}: ${t.type} ${t.amount}z≈Ç`);
                });
            } else {
                console.log('‚úÖ W systemie nie ma transakcji innych u≈ºytkownik√≥w');
            }
        }
        
    } catch (error) {
        console.error('‚ùå B≈ÇƒÖd podczas sprawdzania bazy:', error);
    } finally {
        await prisma.$disconnect();
    }
}

checkDatabase();
