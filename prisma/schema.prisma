generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js wymagane modele
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Rozszerzony model User
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  emailVerified   DateTime?
  name            String?
  image           String?
  hashedPassword  String?   // Dla credentials login
  role            String    @default("USER") // USER, ADMIN
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // NextAuth relations
  accounts        Account[]
  sessions        Session[]
  
  // App relations
  envelopes       Envelope[]
  transactions    Transaction[]
  userConfig      UserConfig?
  
  // Nowe pola bezpieczeństwa
  isActive        Boolean   @default(true)
  lastLoginAt     DateTime?
  loginAttempts   Int       @default(0)
  lockedUntil     DateTime?
}

model Envelope {
  id            String   @id @default(cuid())
  userId        String
  name          String
  type          String   // 'monthly' lub 'yearly'
  plannedAmount Float
  currentAmount Float
  icon          String?
  group         String?  // 'needs', 'lifestyle', 'financial', 'target'
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId, type])
  @@index([userId, group])
}

model Transaction {
  id              String   @id @default(cuid())
  userId          String
  type            String   // income, expense, transfer
  amount          Float
  description     String?
  includeInStats  Boolean  @default(true)
  date            DateTime
  envelopeId      String?
  category        String?
  editHistory     String   @default("[]")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  envelope     Envelope? @relation(fields: [envelopeId], references: [id])

  @@index([userId, date])
  @@index([userId, type])
  @@index([envelopeId])
}

// Konfiguracja użytkownika dla wypłaty i stałych transferów (tylko dla pensji)
model UserConfig {
  id                 String   @id @default(cuid())
  userId             String   @unique
  defaultSalary      Float    @default(0)
  defaultToJoint     Float    @default(0)
  defaultToSavings   Float    @default(0)
  defaultToVacation  Float    @default(0)
  defaultToWedding   Float    @default(0)
  defaultToGroceries Float    @default(0)
  defaultToInvestment Float   @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}